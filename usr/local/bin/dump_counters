#!/usr/bin/env python

import time
import os
import sys
import subprocess
import decimal


def cCrR(f, cols, rows):
    f.write('<pageFormat><noCols>%d</noCols><colItems>%d</colItems></pageFormat>\n' % (cols, rows))


def host():
    return subprocess.check_output(["hostname"]).decode('utf8').rstrip()


def date():
    return subprocess.check_output(["date"]).decode('utf8').rstrip()


def make_header(f):
    f.write('<?xml version="1.0" encoding="UTF-8"?>\n')
    f.write('<acqDataXML>\n')
    f.write('<acqInfo>\n')
    f.write('   <host>%s</host>\n' % host())
    f.write('   <date>%s</date>\n' % date())
    f.write('</acqInfo>\n')
    cCrR(f, 7, 16)


def get_data(cols):
    lines = []
    for file in cols:
        f = open(file, 'r')
        raw = f.read()
        f.close()
        lines.append(raw.strip().split('\n'))

    pasted = []
    jj = 0
    for line in lines[0]:
        paste_line = ' '.join(line.strip().split(' ')).split(' ')

        for ii in range(1, len(lines)):
            paste_line.append(lines[ii][jj])

        pasted.append(paste_line)
        jj += 1

    return pasted


def getmult(value):
    cr = int(value, 16)
    return (cr >> 16) & 0x1f


freq_context = decimal.Context(prec=4)


def freq(knob):
    try:
        query = ["get.site", "0",  knob]
        hz = subprocess.check_output(query).decode('utf8').strip().split(' ')[1]
        return freq_context.create_decimal(hz).to_eng_string()
    except IndexError:
        return 'err'


def make_body(f):
    lines = [['SIGNAL', 'CLK.d0', 'CLK.d1', 'CLK.d2', 'CLK.d3', 'CLK.d4', 'CLK.d5', 'CLK.d6']]
    clkk = [ 'CLK_EXT', 'CLK_MB', 'CLK_S1', 'CLK_S2', 'CLK_S3', 'CLK_S4', 'CLK_S5']
    freqs = [ 'FREQ', ]
    freqs.extend([ freq('SIG:{}:FREQ'.format(k)) for k in clkk ])
    lines.extend([freqs])
    counts = [ 'COUNT', ]
    counts.extend([ freq('SIG:{}:COUNT'.format(k)) for k in clkk ])
    lines.extend([counts])
    lines.extend( [['FUNCTION',  'EXT', 'MB', 'ADC ISR', 'DDSCLK', 'ddsA', 'ddsB', 'ddsC']])

    lines.extend([['---------------','---------------','---------------','---------------','---------------','---------------','---------------','---------------']])

    lines.extend([['SIGNAL', 'TRG.d0', 'TRG.d1', 'TRG.d2', 'TRG.d3', 'TRG.d4', 'TRG.d5', 'TRG.d6']])
    trg = [ 'TRG_EXT', 'TRG_MB', 'TRG_S1', 'TRG_S2', 'TRG_S3']
    freqs = [ 'FREQ', ]
    freqs.extend([ freq('SIG:{}:FREQ'.format(k)) for k in trg ])
    lines.extend([freqs])
    counts = ['COUNT',]
    counts.extend([ freq('SIG:{}:COUNT'.format(k)) for k in trg ])
    lines.extend([counts])
    lines.extend( [['FUNCTION',  'EXT', 'MB', 'S1', 'Chirp A', 'Chirp B']])


    id = 1
    section=1
    subsection=1
    for line in lines:
        if line[0].startswith('---'):
            section += 1
            subsection = 0
        
        f.write('<acqData id="%d" n="%s%s%s %s">\n' % (id, section if subsection != 0 else '', '.' if subsection != 0 else '', subsection if subsection != 0 else '', line[0]))
        f.write('   <v><![CDATA[')
        for field in line[1:]:
            f.write('%15s ' % (field))
        f.write('   ]]></v>\n')
        f.write('</acqData>\n')
        id += 1
        subsection += 1


def make_tail(f):
    f.write('</acqDataXML>\n')


def update_xml():
    f = open('/dev/shm/COUNTERS.xmlt', 'w')
    make_header(f)
    make_body(f)
    make_tail(f)
    f.close()
    os.rename('/dev/shm/COUNTERS.xmlt', '/dev/shm/COUNTERS.xml')


while True:
    update_xml()
    time.sleep(1)
done
